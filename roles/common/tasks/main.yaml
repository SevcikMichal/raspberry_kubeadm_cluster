---
- name: Disable SWAP
  lineinfile:
    path: /etc/dphys-swapfile
    regexp: '^CONF_SWAPSIZE='
    line: 'CONF_SWAPSIZE=0'
  register: disableswap

- name: Reboot machine
  ansible.builtin.reboot:
    msg: "Rebooting machine in 5 seconds"
  when: disableswap.changed

- name: Install UFW
  apt:
    name: ufw
    state: present
    update_cache: yes

- name: Allow OpenSSH and other ports for Kubernetes
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  loop:
    - 22
    - 10250
    - 30000:32767
    - 10256

- name: Allow Flannel UDP Port
  ufw:
    rule: allow
    port: 8472
    proto: udp

- name: Outgoing allow
  ufw:
    state: enabled
    direction: outgoing
    policy: allow

- name: Incoming deny
  ufw:
    state: enabled
    direction: incoming
    policy: deny

# Setup Container runtime
- name: Create deps folder
  file:
    path: /home/pi/deps
    state: directory

- name: Install containerd
  shell: |
    cd /home/pi/deps
    wget https://github.com/containerd/containerd/releases/download/v{{ containerd_version }}/containerd-{{ containerd_version }}-linux-arm64.tar.gz
    sudo tar Cxzvf /usr/local containerd-{{ containerd_version }}-linux-arm64.tar.gz bin
    rm containerd-{{ containerd_version }}-linux-arm64.tar.gz

- name: Install runc
  shell: |
    cd /home/pi/deps
    wget https://github.com/opencontainers/runc/releases/download/{{ runc_version }}/runc.arm64
    sudo install -m 755 runc.arm64 /usr/local/sbin/runc
    rm runc.arm64

- name: Install containerd.service
  shell: |
    cd /home/pi/deps
    wget https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
    sudo mv containerd.service /lib/systemd/system/containerd.service

- name: Enable and start containerd
  systemd:
    name: containerd
    enabled: yes
    state: started

- name: Reload Systemd
  ansible.builtin.command: systemctl daemon-reload
  changed_when: true

- name: Configure containerd
  shell: |
    sudo mkdir -p /etc/containerd/
    sudo containerd config default | sudo tee /etc/containerd/config.toml > /dev/null
    sudo sed -i '/\[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc\]/,/SystemdCgroup/ {
      /SystemdCgroup/!b
      s/SystemdCgroup.*/SystemdCgroup = true/
    }' "/etc/containerd/config.toml"
    sudo systemctl restart containerd

- name: Install CNI plugins
  shell: |
    cd /home/pi/deps
    wget https://github.com/containernetworking/plugins/releases/download/{{ cni_version }}/cni-plugins-linux-arm64-{{ cni_version }}.tgz
    sudo mkdir -p /opt/cni/bin
    sudo tar Cxzvf /opt/cni/bin cni-plugins-linux-arm64-{{ cni_version }}.tgz ./
    rm cni-plugins-linux-arm64-{{ cni_version }}.tgz

- name: Enable kernel modules
  copy:
    dest: /etc/modules-load.d/k8s.conf
    content: |
      overlay
      br_netfilter

- name: Load kernel modules
  shell: |
    sudo modprobe overlay
    sudo modprobe br_netfilter

- name: Set sysctl parameters
  copy:
    dest: /etc/sysctl.d/k8s.conf
    content: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1

- name: Apply sysctl settings
  command: sysctl --system

- name: Check if cgroup_enable=memory is present
  command: grep -q 'cgroup_enable=memory' /boot/firmware/cmdline.txt
  register: cgroup_check
  ignore_errors: true

- name: Enable memory cgroups in cmdline.txt
  lineinfile:
    path: /boot/firmware/cmdline.txt
    regexp: '^(.*)(rootwait.*)$'
    line: '\1cgroup_enable=memory \2'
    backrefs: yes
  when: cgroup_check.rc != 0

- name: Update memory mappings
  sysctl:
    name: vm.max_map_count
    value: 262144
    state: present

- name: Install Kubernetes prerequisites
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gpg
    state: present

- name: Download Kubernetes APT key
  get_url:
    url: "https://pkgs.k8s.io/core:/stable:/{{ kube_version }}/deb/Release.key"
    dest: "/tmp/kubernetes-apt-keyring.gpg"

- name: Add Kubernetes APT key
  command: gpg --dearmor --yes -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/kubernetes-apt-keyring.gpg

- name: Add Kubernetes repository
  apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ kube_version }}/deb/ /"

- name: Install Kubernetes components
  apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    update_cache: yes

- name: Hold kubelet
  ansible.builtin.dpkg_selections:
    name: kubelet
    selection: hold

- name: Hold kubeadm
  ansible.builtin.dpkg_selections:
    name: kubeadm
    selection: hold

- name: Hold kubectl
  ansible.builtin.dpkg_selections:
    name: kubectl
    selection: hold

- name: Enable kubelet
  systemd:
    name: kubelet
    enabled: yes
    state: started

- name: Reboot machine
  ansible.builtin.reboot:
    msg: "Rebooting machine in 5 seconds"
